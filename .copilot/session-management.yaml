# DexBot AI Session Management Configuration
# Patterns for maintaining context and coordination across development sessions

metadata:
  version: "1.0"
  created: "2025-07-03"
  purpose: "Session continuity and context management for enhanced AI coordination"

# Session management patterns
session_management:
  
  context_preservation:
    session_startup:
      context_review:
        - "Review recent git commits to understand current development focus"
        - "Check reports/ directory for recent analysis and completion summaries"
        - "Check tmp/ directory for ongoing work and temporary files"
        - "Identify active feature branches and development objectives"
        - "Review any pending TODO items or incomplete work"
      
      state_assessment:
        - "Run 'python -m invoke status' to check system health"
        - "Verify all invoke validation commands pass"
        - "Check for any outstanding test failures or issues"
        - "Review configuration files for recent changes"
      
      priority_identification:
        - "Identify critical issues requiring immediate attention"
        - "Recognize continuing development tasks from previous sessions"
        - "Note any architectural decisions or patterns established recently"
        - "Understand current quality standards and objectives"
    
    session_continuity:
      pattern_consistency:
        - "Maintain coding style and architectural decisions from previous work"
        - "Continue using established naming conventions and patterns"
        - "Preserve error handling and logging approaches"
        - "Follow testing strategies established in recent development"
      
      development_momentum:
        - "Build upon recently implemented features and optimizations"
        - "Continue optimization work started in previous sessions"
        - "Maintain focus on current architectural objectives"
        - "Preserve established integration patterns between systems"
    
    knowledge_accumulation:
      learning_retention:
        - "Remember DexBot-specific patterns discovered in recent sessions"
        - "Retain understanding of RazorEnhanced quirks and solutions"
        - "Maintain awareness of performance optimization techniques proven effective"
        - "Keep track of testing strategies that work well for different change types"
      
      pattern_evolution:
        - "Recognize when established patterns need evolution or improvement"
        - "Adapt to new requirements while maintaining consistency"
        - "Suggest improvements based on accumulated experience"
        - "Document pattern changes for future reference"
  
  coordination_tracking:
    development_context:
      current_objectives:
        - "Track primary development goals for current session"
        - "Maintain awareness of feature requirements and constraints"
        - "Remember performance targets and optimization priorities"
        - "Keep documentation and testing objectives in focus"
      
      progress_monitoring:
        - "Track completion status of multi-phase development tasks"
        - "Monitor quality metrics and validation status"
        - "Maintain awareness of integration testing progress"
        - "Keep documentation currency and completeness status"
      
      decision_history:
        - "Remember architectural decisions made during current development"
        - "Track trade-offs evaluated and choices made"
        - "Maintain awareness of rejected alternatives and rationale"
        - "Document lessons learned for future reference"
    
    communication_continuity:
      preference_tracking:
        - "Remember preferred communication style and detail level"
        - "Adapt to demonstrated expertise level and domain knowledge"
        - "Maintain consistency in explanation depth and technical focus"
        - "Preserve established collaboration patterns and workflows"
        - "CRITICAL: Always enforce branch protection - never work directly on main"
        - "Always start sessions with git fetch/pull main before creating branches"
      
      context_sharing:
        - "Provide relevant background when resuming interrupted work"
        - "Reference previous decisions and their rationale when relevant"
        - "Maintain awareness of established development conventions"
        - "Share accumulated insights about effective development approaches"

# Intelligent task resumption
task_resumption:
  
  work_continuation:
    incomplete_features:
      identification:
        - "Scan git status for uncommitted changes and works in progress"
        - "Review reports/ directory for incomplete analysis or implementation"
        - "Review tmp/ directory for temporary work files to clean up or preserve"
        - "Check for TODO comments and incomplete implementations"
        - "Identify partially implemented features or optimizations"
      
      continuation_strategy:
        - "Assess current state and remaining work for incomplete features"
        - "Identify dependencies and prerequisites for continuation"
        - "Plan incremental development approach for completion"
        - "Validate current work before adding new functionality"
    
    optimization_continuation:
      performance_work:
        - "Review recent performance analysis and optimization reports"
        - "Identify optimization opportunities flagged but not yet implemented"
        - "Continue systematic optimization of identified bottlenecks"
        - "Validate performance improvements and measure impact"
      
      quality_improvements:
        - "Continue test coverage improvements for under-tested areas"
        - "Complete documentation updates for recently modified systems"
        - "Implement error handling improvements identified in code review"
        - "Address technical debt items identified during development"
    
    integration_work:
      cross_system_coordination:
        - "Complete integration work started between multiple systems"
        - "Validate system interactions after individual system changes"
        - "Implement event communication patterns established but incomplete"
        - "Test end-to-end workflows across multiple integrated systems"

# Enhanced quality coordination
quality_coordination:
  
  continuous_validation:
    development_checkpoints:
      micro_validations:
        - "Validate code style and imports after each significant change"
        - "Run relevant unit tests during development, not just at completion"
        - "Check for obvious integration issues incrementally"
        - "Verify configuration integration with each config-dependent change"
      
      incremental_testing:
        - "Test individual components before integration"
        - "Validate error handling paths as they're implemented"
        - "Check performance impact of changes incrementally"
        - "Verify documentation accuracy with each update"
      
      integration_verification:
        - "Test system interactions after multi-system modifications"
        - "Validate event communication flows between systems"
        - "Verify configuration changes don't break existing functionality"
        - "Confirm GUMP interface integration works correctly"
    
    quality_assurance:
      proactive_quality:
        - "Anticipate quality issues and address them during development"
        - "Suggest additional test cases based on change complexity"
        - "Identify potential performance implications early"
        - "Recommend documentation updates as code evolves"
      
      collaborative_review:
        - "Provide detailed analysis of code quality and architectural alignment"
        - "Suggest improvements for maintainability and extensibility"
        - "Identify optimization opportunities and performance enhancements"
        - "Verify comprehensive error handling and edge case coverage"

# Advanced coordination metrics
coordination_metrics:
  
  effectiveness_indicators:
    development_efficiency:
      speed_metrics:
        - "Time from requirement understanding to working implementation"
        - "Frequency of clarification requests during development"
        - "Percentage of code passing validation on first attempt"
        - "Reduced debugging cycles due to proactive error prevention"
      
      quality_metrics:
        - "Test coverage maintenance during rapid development"
        - "Documentation currency and completeness scores"
        - "Integration success rate for new features"
        - "Performance maintenance during feature addition"
    
    collaboration_quality:
      communication_effectiveness:
        - "Alignment between AI understanding and developer intent"
        - "Usefulness of proactive suggestions and recommendations"
        - "Accuracy of architectural and performance guidance"
        - "Effectiveness of problem-solving collaboration"
      
      knowledge_transfer:
        - "Developer understanding enhancement through collaboration"
        - "Pattern discovery and documentation effectiveness"
        - "Technical skill development through AI-assisted development"
        - "Project knowledge retention and accessibility"
  
  continuous_improvement:
    feedback_integration:
      pattern_refinement:
        - "Adjust assistance patterns based on collaboration outcomes"
        - "Refine understanding of project priorities and constraints"
        - "Improve prediction of developer needs and preferences"
        - "Enhance technical guidance accuracy and relevance"
      
      capability_enhancement:
        - "Expand domain knowledge through collaborative problem-solving"
        - "Improve architectural guidance through project evolution"
        - "Enhance performance optimization expertise through experience"
        - "Develop better debugging and troubleshooting approaches"

# Session documentation patterns
session_documentation:
  
  progress_tracking:
    session_summaries:
      accomplishments:
        - "Document features implemented or enhanced during session"
        - "Record performance optimizations and their measured impact"
        - "Note architectural improvements and their rationale"
        - "Track quality improvements and validation results"
      
      insights_gained:
        - "Document new DexBot patterns discovered or established"
        - "Record RazorEnhanced insights and workaround solutions"
        - "Note effective optimization techniques and their applicability"
        - "Capture lessons learned about effective development approaches"
      
      future_work:
        - "Identify follow-up work and enhancement opportunities"
        - "Document architectural evolution plans and considerations"
        - "Note performance optimization opportunities for future sessions"
        - "Plan integration and testing work for subsequent development"
    
    knowledge_capture:
      pattern_documentation:
        - "Create reusable templates for common development scenarios"
        - "Document effective debugging and troubleshooting approaches"
        - "Record optimization techniques with performance impact data"
        - "Capture architectural decision rationale for future reference"
      
      continuous_learning:
        - "Update AI configuration based on successful collaboration patterns"
        - "Refine development task templates based on experience"
        - "Enhance coordination protocols based on effectiveness feedback"
        - "Evolve quality standards based on project maturation"
