# DexBot AI Assistant Configuration
# This file provides structured context for GitHub Copilot and AI tools working on DexBot

metadata:
  version: "1.0"
  created: "2025-07-03"
  purpose: "AI assistant configuration for optimal DexBot development support"
  
project:
  name: "DexBot"
  type: "Ultima Online Automation Bot"
  platform: "RazorEnhanced Python Scripting"
  version: "3.2.0"
  
  description: |
    High-performance, modular bot system for Ultima Online with intelligent 
    healing, combat, and looting capabilities. Production-ready with 12+ hour 
    stable sessions and 85-95% performance optimizations.

# Core development context for AI assistants
development_context:
  environment:
    runtime: "RazorEnhanced IronPython"
    python_version: "3.x with .NET Framework integration"
    constraints:
      - "Single-threaded execution model preferred"
      - "No standard Python packages (requests, pandas, etc.)"
      - "Memory management crucial for long sessions"
      - "Uses .NET APIs through Python bindings"
    
  architecture:
    pattern: "Modular system with clear separation of concerns"
    core_systems:
      - "auto_heal: Intelligent healing and buff management"
      - "combat: Enemy detection, targeting, engagement"
      - "looting: Corpse processing with 90% optimization"
      - "ui: GUMP interfaces and user interaction"
      - "core: Bot logic and state management"
      - "config: Configuration management"
      - "utils: Utilities and helper functions"
    
  coding_standards:
    line_length: 100
    style_guide: "PEP 8 with project-specific conventions"
    naming_conventions:
      functions: "snake_case"
      classes: "PascalCase" 
      constants: "UPPER_CASE"
      private: "_private_method"
    string_quotes: "double quotes preferred"
    
  testing:
    pattern: "3-case testing (pass/fail/edge)"
    coverage_target: "96%+"
    framework: "Custom testing with RazorEnhanced mocks"
    
# AI assistant behavior guidelines
ai_guidelines:
  code_generation:
    always_include:
      - "Comprehensive docstrings with Args, Returns, Raises, Example"
      - "Type hints when beneficial"
      - "Error handling with try/except blocks"
      - "RazorEnhanced API error handling"
      - "Logging using Logger from src/core/logger.py"
    
    prefer:
      - "Explicit over implicit code"
      - "Verbose for clarity over concise"
      - "Comments for complex RazorEnhanced API usage"
      - "Edge case consideration"
      - "Extensible patterns"
    
    avoid:
      - "Standard Python package imports"
      - "Multi-threading (use single-thread patterns)"
      - "eval(), exec(), or pickle.load() on untrusted data"
      - "Hardcoded values (use configuration)"
    
  common_imports:
    razorenhanced:
      - "from System.Collections.Generic import List"
      - "from System import Int32 as int"
    project:
      - "from src.core.logger import Logger"
      - "from src.config.config_manager import ConfigManager"
    
  error_patterns:
    razorenhanced_api: "RazorEnhancedAPIError"
    system_errors: "DexBotSystemError"
    always_wrap: "All RazorEnhanced API calls in try/except"
    
# Project-specific knowledge
project_knowledge:
  performance_critical:
    - "Combat system update loops (100ms cycles)"
    - "Looting system item evaluation"
    - "API call optimization and caching"
    - "Memory management for 12+ hour sessions"
    
  common_patterns:
    configuration: "ConfigManager.get_setting('system.setting_name')"
    logging: "Logger.info/debug/error/warning(message)"
    api_calls: "Always wrap in try/except with specific error handling"
    
  file_locations:
    configs: "config/*.json"
    systems: "src/systems/*.py"
    tests: "tests/test_*.py"
    utils: "src/utils/*.py"
    docs: "docs/*.md"
    
# Development workflow context
workflow:
  validation_commands:
    integrity: "python -m invoke validate"
    testing: "python -m invoke test"
    build: "python -m invoke build"
    
  commit_requirements:
    - "All invoke validate checks pass"
    - "Test coverage maintains 96%+"
    - "No syntax errors or import issues"
    - "Documentation updated for changes"
    
  branch_strategy:
    feature_prep: "./scripts/prepare_feature.ps1 feature-name"
    commit_pattern: "conventional commits (feat:, fix:, docs:, test:)"
    
# Common development scenarios and solutions
scenarios:
  new_system_development:
    steps:
      1. "Review PRD in docs/prds/"
      2. "Create config file in config/"
      3. "Implement core system in src/systems/"
      4. "Write 3-case tests in tests/"
      5. "Add UI components in src/ui/ if needed"
      6. "Update documentation"
      7. "Validate with invoke commands"
    
    template_imports: |
      from System.Collections.Generic import List
      from System import Int32 as int
      from src.core.logger import Logger
      from src.config.config_manager import ConfigManager
    
  bug_fixing:
    investigation:
      - "Check logs in logs/ directory"
      - "Review error patterns in src/core/logger.py"
      - "Test with invoke test command"
      - "Validate with invoke validate"
    
    testing:
      - "Reproduce with minimal test case"
      - "Add test case for the bug"
      - "Verify fix doesn't break other systems"
      - "Update documentation if needed"
    
  performance_optimization:
    focus_areas:
      - "API call reduction"
      - "Memory usage optimization"
      - "Loop efficiency in update cycles"
      - "Caching strategies"
    
    measurement: "Use performance profiling in reports/"
    
# File organization preferences
file_organization:
  temporary_files: "reports/ directory"
  analysis_files: "reports/TASK_NAME_*.md"
  cleanup_pattern: "Remove old temp files at session end"
  preserve: "Final deliverables and .gitkeep"
  
# Documentation patterns for AI
documentation_patterns:
  context_blocks: |
    """
    === AI CONTEXT BLOCK ===
    System: [System Name]
    Purpose: [Brief description]
    Dependencies: [Key dependencies]
    Performance: [Performance considerations]
    Error Handling: [Error scenarios]
    Integration: [How it connects to other systems]
    === END AI CONTEXT ===
    """
  
  method_documentation: |
    def method_name(self, param: type) -> return_type:
        """
        Brief description of what the method does.
        
        Args:
            param: Description of parameter and expected values
            
        Returns:
            Description of return value and structure
            
        Raises:
            SpecificError: When specific condition occurs
            
        Example:
            result = self.method_name("test_value")
            if result.success:
                process_result(result.data)
        """

# Quick reference for common tasks
quick_reference:
  start_new_feature: ".\scripts\prepare_feature.ps1 feature-name"
  run_tests: "python -m invoke test"
  validate_changes: "python -m invoke validate"
  build_distribution: "python -m invoke build"
  check_status: "python -m invoke status"
  
  common_file_locations:
    main_config: "config/main_config.json"
    auto_heal_config: "config/auto_heal_config.json"
    combat_config: "config/combat_config.json"
    looting_config: "config/looting_config.json"
    
  system_entry_points:
    auto_heal: "src/systems/auto_heal.py"
    combat: "src/systems/combat.py"
    looting: "src/systems/looting.py"
    
  test_locations:
    auto_heal_tests: "tests/test_auto_heal.py"
    combat_tests: "tests/test_combat.py"
    looting_tests: "tests/test_looting.py"
