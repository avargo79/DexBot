# DexBot AI Coordination Enhancement Configuration
# Advanced patterns for optimal human-AI collaboration on DexBot development

metadata:
  version: "1.0"
  created: "2025-07-03"
  purpose: "Enhanced coordination patterns for effective human-AI collaboration"
  extends: "ai-config.yaml, project-context.yaml, development-tasks.yaml"

# Communication enhancement patterns
communication_enhancement:
  
  proactive_assistance:
    anticipate_needs:
      - "Suggest related optimizations when implementing new features"
      - "Identify potential integration issues before they occur"
      - "Recommend testing strategies based on change scope"
      - "Propose documentation updates for modified systems"
    
    context_enrichment:
      - "Provide background on why certain patterns exist in DexBot"
      - "Explain RazorEnhanced constraints that influence design decisions"
      - "Describe performance implications of different approaches"
      - "Reference related existing implementations for consistency"
    
    knowledge_transfer:
      - "Explain complex DexBot concepts during implementation"
      - "Share insights about RazorEnhanced quirks and limitations"
      - "Document patterns discovered during development"
      - "Create reusable examples for future reference"
  
  adaptive_communication:
    task_complexity_awareness:
      simple_tasks: "Provide concise, direct assistance with minimal explanation"
      moderate_tasks: "Include context and reasoning for decisions made"
      complex_tasks: "Offer detailed explanations, alternatives, and trade-offs"
      exploratory_tasks: "Collaborate on problem analysis and solution design"
    
    expertise_level_adaptation:
      novice_developer: "Provide detailed explanations and step-by-step guidance"
      experienced_developer: "Focus on DexBot-specific patterns and constraints"
      domain_expert: "Collaborate on architectural decisions and optimizations"
      maintainer: "Emphasize long-term maintainability and evolution"
    
    session_context_tracking:
      remember_preferences: "Track preferred coding style and explanation level"
      maintain_focus: "Keep current task objectives and constraints in mind"
      build_understanding: "Accumulate knowledge about current development session"
      suggest_efficiency: "Propose workflow optimizations based on observed patterns"

# Enhanced workflow coordination
workflow_coordination:
  
  development_phases:
    analysis_phase:
      objectives:
        - "Understand requirements and constraints thoroughly"
        - "Identify integration points with existing systems"
        - "Assess performance implications and optimization opportunities"
        - "Plan testing strategy and validation approach"
      
      ai_contributions:
        - "Analyze existing code patterns for consistency requirements"
        - "Identify potential architectural challenges early"
        - "Suggest performance optimization strategies"
        - "Recommend comprehensive testing approaches"
    
    implementation_phase:
      objectives:
        - "Write clean, efficient code following DexBot patterns"
        - "Implement proper error handling and logging"
        - "Ensure integration with existing configuration management"
        - "Create comprehensive tests using 3-case pattern"
      
      ai_contributions:
        - "Generate code that follows established DexBot patterns"
        - "Implement comprehensive error handling automatically"
        - "Create test scaffolding and test cases"
        - "Suggest performance optimizations during implementation"
    
    validation_phase:
      objectives:
        - "Verify all invoke commands pass successfully"
        - "Confirm integration with existing systems works correctly"
        - "Validate performance meets DexBot standards"
        - "Ensure documentation is complete and accurate"
      
      ai_contributions:
        - "Run validation commands and interpret results"
        - "Identify potential integration issues"
        - "Suggest additional test cases for edge conditions"
        - "Verify documentation completeness and accuracy"
    
    optimization_phase:
      objectives:
        - "Identify and implement performance improvements"
        - "Optimize memory usage for long-running sessions"
        - "Reduce API call frequency through smart caching"
        - "Implement efficient update cycles and batch operations"
      
      ai_contributions:
        - "Analyze code for optimization opportunities"
        - "Suggest caching strategies and ignore list optimizations"
        - "Implement performance monitoring and measurement"
        - "Create performance benchmarks and reports"

# Intelligent task coordination
task_coordination:
  
  dependency_management:
    file_relationships:
      core_dependencies:
        - "src/core/logger.py affects all systems (logging changes)"
        - "src/config/config_manager.py affects all systems (config changes)"
        - "src/core/bot_controller.py affects system integration"
      
      system_dependencies:
        - "auto_heal changes may affect combat timing"
        - "combat changes may affect looting trigger conditions"
        - "looting changes may affect inventory management in all systems"
      
      test_dependencies:
        - "System changes require corresponding test updates"
        - "Core changes require comprehensive test suite validation"
        - "Config changes require default config validation"
    
    change_impact_analysis:
      low_impact: "Single system, no external dependencies"
      medium_impact: "Multiple systems or core component changes"
      high_impact: "Architecture changes or API modifications"
      critical_impact: "Changes affecting all systems or core stability"
    
    testing_strategy_selection:
      isolated_testing: "For single system changes with clear boundaries"
      integration_testing: "For changes affecting multiple system interactions"
      regression_testing: "For core component or API changes"
      performance_testing: "For optimization changes or update cycle modifications"
  
  priority_management:
    critical_issues:
      - "System crashes or stability problems"
      - "Performance degradation affecting long sessions"
      - "RazorEnhanced API compatibility issues"
      - "Data corruption or loss scenarios"
    
    high_priority:
      - "New feature implementation with clear PRD"
      - "Performance optimization with measurable impact"
      - "Bug fixes with reproduction steps"
      - "Test coverage improvements for critical systems"
    
    medium_priority:
      - "Code quality improvements and refactoring"
      - "Documentation updates and enhancements"
      - "Non-critical feature additions"
      - "Development workflow optimizations"
    
    low_priority:
      - "Code style consistency improvements"
      - "Additional test cases for edge conditions"
      - "Documentation formatting and organization"
      - "Development tool enhancements"

# Advanced problem-solving coordination
problem_solving:
  
  collaborative_debugging:
    information_gathering:
      - "Analyze error logs and reproduction steps systematically"
      - "Identify affected systems and potential root causes"
      - "Gather relevant configuration and environment information"
      - "Review recent changes that might have introduced issues"
    
    hypothesis_development:
      - "Propose multiple potential causes based on symptoms"
      - "Prioritize hypotheses based on likelihood and impact"
      - "Design targeted tests to validate or eliminate theories"
      - "Plan debugging strategy to efficiently isolate problems"
    
    solution_implementation:
      - "Implement fixes with comprehensive error handling"
      - "Add logging and monitoring to prevent future occurrences"
      - "Create test cases to prevent regression"
      - "Document solution and lessons learned"
  
  architectural_decisions:
    decision_framework:
      - "Evaluate options against DexBot's performance requirements"
      - "Consider long-term maintainability and extensibility"
      - "Assess impact on existing systems and workflows"
      - "Plan migration strategy for significant changes"
    
    stakeholder_considerations:
      - "End user impact and experience changes"
      - "Developer productivity and maintenance burden"
      - "System performance and resource utilization"
      - "Future development flexibility and constraints"
    
    documentation_requirements:
      - "Architectural Decision Records (ADRs) for significant choices"
      - "Migration guides for breaking changes"
      - "Performance impact analysis and benchmarks"
      - "Future enhancement roadmap and considerations"

# Quality assurance coordination
quality_assurance:
  
  continuous_validation:
    development_checkpoints:
      - "Validate code style and conventions after each significant change"
      - "Run relevant test suites during development, not just at end"
      - "Check performance implications of changes incrementally"
      - "Verify documentation accuracy and completeness regularly"
    
    integration_verification:
      - "Test system interactions after multi-system changes"
      - "Validate configuration management integration"
      - "Verify error handling and recovery mechanisms"
      - "Confirm long-running session stability"
    
    performance_monitoring:
      - "Measure and compare performance before and after changes"
      - "Monitor memory usage patterns during development"
      - "Track API call frequency and optimization effectiveness"
      - "Validate update cycle timing and responsiveness"
  
  collaborative_review:
    code_review_enhancement:
      - "Provide detailed analysis of architectural alignment"
      - "Identify potential performance optimizations"
      - "Suggest additional test cases and edge conditions"
      - "Verify documentation completeness and accuracy"
    
    knowledge_sharing:
      - "Explain implementation decisions and trade-offs"
      - "Share insights about RazorEnhanced patterns discovered"
      - "Document optimization techniques for future reference"
      - "Create examples and templates for similar future work"

# Success metrics for coordination
success_metrics:
  
  efficiency_indicators:
    development_speed: "Time from requirements to working implementation"
    quality_first_pass: "Percentage of code that passes review without changes"
    bug_prevention: "Reduction in post-implementation defects"
    optimization_impact: "Measurable performance improvements achieved"
  
  collaboration_quality:
    communication_clarity: "Reduced need for clarification requests"
    context_accuracy: "AI understanding aligns with human intent"
    proactive_assistance: "Useful suggestions provided without prompting"
    knowledge_transfer: "Human understanding enhanced through collaboration"
  
  long_term_benefits:
    codebase_consistency: "New code seamlessly integrates with existing patterns"
    maintainability_improvement: "Reduced future maintenance burden"
    documentation_quality: "Comprehensive and accurate project documentation"
    team_productivity: "Overall development velocity and quality improvements"
