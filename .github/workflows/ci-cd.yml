name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      # Source code files that affect the build
      - 'src/**/*.py'
      - 'src/**/*.json'
      # Build and configuration files
      - 'tasks.py'
      - 'requirements.txt'
      - 'pyproject.toml'
      # Test files
      - 'tests/**/*.py'
      # CI/CD configuration itself
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      # Source code files that affect the build
      - 'src/**/*.py'
      - 'src/**/*.json'
      # Build and configuration files
      - 'tasks.py'
      - 'requirements.txt'
      - 'pyproject.toml'
      # Test files
      - 'tests/**/*.py'
      # CI/CD configuration itself
      - '.github/workflows/**'

# Grant necessary permissions for the entire workflow
permissions:
  contents: write
  pull-requests: read
  packages: write
  security-events: write  # Required for CodeQL

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: python
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:python"
      # The CodeQL action will automatically fail the job if it finds security issues

  lint-test-build:
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install invoke flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Run linting
      id: lint
      run: |
        python -m invoke lint
        if [ $? -ne 0 ]; then
          echo "::error::Linting failed! Fix the linting issues before proceeding."
          exit 1
        fi
      
    - name: Run tests
      id: test
      run: |
        python -m invoke test
        if [ $? -ne 0 ]; then
          echo "::error::Tests failed! Fix the failing tests before proceeding."
          exit 1
        fi
      
    - name: Build bundle
      id: build
      run: |
        python -m invoke bundle
        if [ $? -ne 0 ]; then
          echo "::error::Build failed! Fix the build issues before proceeding."
          exit 1
        fi
      
    - name: Upload bundle artifact
      uses: actions/upload-artifact@v4
      with:
        name: dexbot-bundle
        path: dist/DexBot.py
        retention-days: 30

  release:
    needs: lint-test-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download bundle artifact
      uses: actions/download-artifact@v4
      with:
        name: dexbot-bundle
        path: dist/
        
    - name: Get version from bundle
      id: get_version
      run: |
        VERSION=$(python -c "
        import re
        with open('dist/DexBot.py', 'r') as f:
            content = f.read()
            match = re.search(r'Version:\s*([^\n]+)', content)
            if match:
                print(match.group(1).strip())
            else:
                print('unknown')
        ")
        RELEASE_DATE=$(date +'%Y-%m-%d %H:%M:%S UTC')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$(date +'%Y.%m.%d')-$(echo $GITHUB_SHA | cut -c1-8)" >> $GITHUB_OUTPUT
        echo "release_date=$RELEASE_DATE" >> $GITHUB_OUTPUT
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.tag }}
        name: DexBot ${{ steps.get_version.outputs.version }}
        body: |
          Automated release of DexBot
          
          **Version**: ${{ steps.get_version.outputs.version }}
          **Build**: ${{ github.sha }}
          **Date**: ${{ steps.get_version.outputs.release_date }}
          
          ### Changes
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/docs/CHANGELOG.md) for detailed changes.
          
          ### Installation
          1. Download `DexBot.py` from the assets below
          2. Place it in your RazorEnhanced Scripts folder
          3. Run the script in RazorEnhanced
          
          ### Requirements
          - Ultima Online client
          - RazorEnhanced
        draft: false
        prerelease: false
        files: |
          dist/DexBot.py
