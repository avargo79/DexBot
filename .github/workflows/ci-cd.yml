name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-test-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install invoke flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Run linting
      run: python -m invoke lint
      
    - name: Run tests
      run: python -m invoke test
      continue-on-error: true  # Don't fail build if tests fail (for now)
      
    - name: Build bundle
      run: python -m invoke bundle
      
    - name: Upload bundle artifact
      uses: actions/upload-artifact@v3
      with:
        name: dexbot-bundle
        path: dist/DexBot.py
        retention-days: 30

  release:
    needs: lint-test-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download bundle artifact
      uses: actions/download-artifact@v3
      with:
        name: dexbot-bundle
        path: dist/
        
    - name: Get version from bundle
      id: get_version
      run: |
        VERSION=$(python -c "
        import re
        with open('dist/DexBot.py', 'r') as f:
            content = f.read()
            match = re.search(r'Version:\s*([^\n]+)', content)
            if match:
                print(match.group(1).strip())
            else:
                print('unknown')
        ")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$(date +'%Y.%m.%d')-$(echo $GITHUB_SHA | cut -c1-8)" >> $GITHUB_OUTPUT
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.tag }}
        release_name: DexBot ${{ steps.get_version.outputs.version }}
        body: |
          Automated release of DexBot
          
          **Version**: ${{ steps.get_version.outputs.version }}
          **Build**: ${{ github.sha }}
          **Date**: $(date +'%Y-%m-%d %H:%M:%S UTC')
          
          ### Changes
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/docs/CHANGELOG.md) for detailed changes.
          
          ### Installation
          1. Download `DexBot.py` from the assets below
          2. Place it in your RazorEnhanced Scripts folder
          3. Run the script in RazorEnhanced
          
          ### Requirements
          - Ultima Online client
          - RazorEnhanced
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/DexBot.py
        asset_name: DexBot.py
        asset_content_type: text/plain

  # Job to update documentation if API reference needs refresh
  update-docs:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests beautifulsoup4 markdown
        
    - name: Check if API docs need update
      id: check_api
      run: |
        if [ ! -f "docs/RazorEnhanced_API_Reference.md" ] || [ $(find docs/RazorEnhanced_API_Reference.md -mtime +7) ]; then
          echo "needs_update=true" >> $GITHUB_OUTPUT
        else
          echo "needs_update=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Update API documentation
      if: steps.check_api.outputs.needs_update == 'true'
      run: python scripts/update_api_docs.py
      
    - name: Commit updated docs
      if: steps.check_api.outputs.needs_update == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add docs/RazorEnhanced_API_Reference.md
        git commit -m "docs: Update RazorEnhanced API reference" || exit 0
        git push
